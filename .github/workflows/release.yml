name: Build and Release

on:
  push:
    branches:
      - master
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: darwin
            arch: x64
            artifact_name: nilaa-player-darwin-x64
            make_targets: --platform=darwin --arch=x64
          - os: macos-latest
            platform: darwin
            arch: arm64
            artifact_name: nilaa-player-darwin-arm64
            make_targets: --platform=darwin --arch=arm64
          - os: windows-latest
            platform: win32
            arch: x64
            artifact_name: nilaa-player-win32-x64
            make_targets: --platform=win32 --arch=x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
            artifact_name: nilaa-player-linux-x64
            make_targets: --platform=linux --arch=x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "dir=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate icons (macOS)
        if: matrix.os == 'macos-latest'
        run: pnpm run generate-icons-macos

      - name: Generate icons (Windows/Linux)
        if: matrix.os != 'macos-latest'
        run: pnpm run generate-icons

      - name: Setup 7-Zip (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # 7-Zip is usually pre-installed, just add to PATH
          echo "C:\Program Files\7-Zip" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          # Verify it's available
          if (-not (Test-Path "C:\Program Files\7-Zip\7z.exe")) {
            choco install 7zip -y
          }

      - name: Install native dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm-dev libxcomposite-dev libxdamage-dev libxrandr-dev libgbm-dev libxss-dev libasound2-dev libgtk-3-dev libxshmfence-dev
          sudo snap install snapcraft --classic

      - name: Build application
        run: pnpm run make ${{ matrix.make_targets }}
        env:
          NODE_ENV: production

      - name: Prepare artifacts (macOS)
        if: matrix.platform == 'darwin'
        run: |
          mkdir -p artifacts
          find out -name "*.zip" -exec cp {} artifacts/ \;
          cd artifacts
          for file in *.zip; do
            if [ -f "$file" ]; then
              mv "$file" "${{ matrix.artifact_name }}.zip"
            fi
          done
        shell: bash

      - name: Prepare artifacts (Windows)
        if: matrix.platform == 'win32'
        run: |
          mkdir -p artifacts
          find out -name "*.exe" -exec cp {} artifacts/ \;
          cd artifacts
          for file in *.exe; do
            if [ -f "$file" ]; then
              mv "$file" "${{ matrix.artifact_name }}.exe"
            fi
          done
        shell: bash

      - name: Prepare artifacts (Linux)
        if: matrix.platform == 'linux'
        run: |
          mkdir -p artifacts
          find out -name "*.deb" -exec cp {} artifacts/ \;
          find out -name "*.rpm" -exec cp {} artifacts/ \;
          find out -name "*.snap" -exec cp {} artifacts/ \;
          cd artifacts
          for file in *.deb; do
            [ -f "$file" ] && mv "$file" "${{ matrix.artifact_name }}.deb"
          done
          for file in *.rpm; do
            [ -f "$file" ] && mv "$file" "${{ matrix.artifact_name }}.rpm"
          done
          for file in *.snap; do
            [ -f "$file" ] && mv "$file" "${{ matrix.artifact_name }}.snap"
          done
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: artifacts/*
          retention-days: 30
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-artifacts

      - name: Flatten artifacts directory
        run: |
          mkdir -p ./dist
          find ./release-artifacts -type f \( -name "*.zip" -o -name "*.exe" -o -name "*.deb" -o -name "*.rpm" -o -name "*.snap" \) -exec cp {} ./dist/ \;
          ls -lh ./dist/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Nilaa Player ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: ./dist/*
          body: |
            ## üé¨ Nilaa Player ${{ github.ref_name }}

            A modern desktop video player for offline course management and progress tracking.

            ### üì¶ Downloads

            **macOS:**
            - üçé Intel (x64): `nilaa-player-darwin-x64.zip`
            - üçé Apple Silicon (ARM64): `nilaa-player-darwin-arm64.zip`

            **Windows:**
            - ü™ü 64-bit: `nilaa-player-win32-x64.exe`

            **Linux:**
            - üêß Debian/Ubuntu: `nilaa-player-linux-x64.deb`
            - üêß Red Hat/Fedora: `nilaa-player-linux-x64.rpm`
            - üêß Snap (Universal): `nilaa-player-linux-x64.snap`

            ### üìñ Installation Instructions

            **macOS:**
            1. Download the appropriate ZIP file for your Mac
            2. Extract the ZIP file
            3. If you get a "damaged" warning, run in Terminal:
               ```bash
               xattr -cr /path/to/Nilaa\ Player.app
               ```
            4. Right-click the app and select "Open" to bypass Gatekeeper

            **Windows:**
            1. Download the `.exe` installer
            2. Run the installer
            3. Follow the installation wizard

            **Linux:**
            - **Debian/Ubuntu:**
              ```bash
              sudo dpkg -i nilaa-player-linux-x64.deb
              ```
            - **Red Hat/Fedora:**
              ```bash
              sudo rpm -i nilaa-player-linux-x64.rpm
              ```
            - **Snap (any distro):**
              ```bash
              sudo snap install nilaa-player-linux-x64.snap --dangerous
              ```

            ### üîç What's Changed
            See the automatically generated release notes below for detailed changes.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
